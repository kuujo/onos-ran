// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/onosproject/onos-ric/pkg/southbound (interfaces: E2)

// Package mock_southbound is a generated GoMock package.
package mock_southbound

import (
	gomock "github.com/golang/mock/gomock"
	sb "github.com/onosproject/onos-ric/api/sb"
	e2ap "github.com/onosproject/onos-ric/api/sb/e2ap"
	southbound "github.com/onosproject/onos-ric/pkg/southbound"
	device "github.com/onosproject/onos-topo/api/device"
	reflect "reflect"
)

// MockE2 is a mock of E2 interface
type MockE2 struct {
	ctrl     *gomock.Controller
	recorder *MockE2MockRecorder
}

// MockE2MockRecorder is the mock recorder for MockE2
type MockE2MockRecorder struct {
	mock *MockE2
}

// NewMockE2 creates a new mock instance
func NewMockE2(ctrl *gomock.Controller) *MockE2 {
	mock := &MockE2{ctrl: ctrl}
	mock.recorder = &MockE2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockE2) EXPECT() *MockE2MockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockE2) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockE2MockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockE2)(nil).Close))
}

// L2MeasConfig mocks base method
func (m *MockE2) L2MeasConfig(arg0 *sb.L2MeasConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "L2MeasConfig", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// L2MeasConfig indicates an expected call of L2MeasConfig
func (mr *MockE2MockRecorder) L2MeasConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "L2MeasConfig", reflect.TypeOf((*MockE2)(nil).L2MeasConfig), arg0)
}

// RRMConfig mocks base method
func (m *MockE2) RRMConfig(arg0 sb.XICICPA) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RRMConfig", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RRMConfig indicates an expected call of RRMConfig
func (mr *MockE2MockRecorder) RRMConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RRMConfig", reflect.TypeOf((*MockE2)(nil).RRMConfig), arg0)
}

// RemoteAddress mocks base method
func (m *MockE2) RemoteAddress() sb.Endpoint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteAddress")
	ret0, _ := ret[0].(sb.Endpoint)
	return ret0
}

// RemoteAddress indicates an expected call of RemoteAddress
func (mr *MockE2MockRecorder) RemoteAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteAddress", reflect.TypeOf((*MockE2)(nil).RemoteAddress))
}

// Run mocks base method
func (m *MockE2) Run(arg0 sb.ECGI, arg1 sb.Endpoint, arg2 device.TlsConfig, arg3 device.Credentials, arg4, arg5, arg6 func(e2ap.RicIndication), arg7 bool, arg8 chan southbound.E2) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
}

// Run indicates an expected call of Run
func (mr *MockE2MockRecorder) Run(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockE2)(nil).Run), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
}

// Setup mocks base method
func (m *MockE2) Setup() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup")
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup
func (mr *MockE2MockRecorder) Setup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockE2)(nil).Setup))
}

// UeHandover mocks base method
func (m *MockE2) UeHandover(arg0 []string, arg1, arg2 sb.ECGI) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UeHandover", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UeHandover indicates an expected call of UeHandover
func (mr *MockE2MockRecorder) UeHandover(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UeHandover", reflect.TypeOf((*MockE2)(nil).UeHandover), arg0, arg1, arg2)
}
