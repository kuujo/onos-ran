// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/store/indications/indications.proto

package indications

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	e2ap "github.com/onosproject/onos-ric/api/sb/e2ap"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SubscribeRequest struct {
	Device string `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Term   uint64 `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
}

func (m *SubscribeRequest) Reset()         { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()    {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b78dba36f8298c99, []int{0}
}
func (m *SubscribeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRequest.Merge(m, src)
}
func (m *SubscribeRequest) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRequest proto.InternalMessageInfo

func (m *SubscribeRequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *SubscribeRequest) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

type SubscribeResponse struct {
	Device     string              `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Term       uint64              `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
	Indication *e2ap.RicIndication `protobuf:"bytes,3,opt,name=indication,proto3" json:"indication,omitempty"`
}

func (m *SubscribeResponse) Reset()         { *m = SubscribeResponse{} }
func (m *SubscribeResponse) String() string { return proto.CompactTextString(m) }
func (*SubscribeResponse) ProtoMessage()    {}
func (*SubscribeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b78dba36f8298c99, []int{1}
}
func (m *SubscribeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscribeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeResponse.Merge(m, src)
}
func (m *SubscribeResponse) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeResponse proto.InternalMessageInfo

func (m *SubscribeResponse) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *SubscribeResponse) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *SubscribeResponse) GetIndication() *e2ap.RicIndication {
	if m != nil {
		return m.Indication
	}
	return nil
}

func init() {
	proto.RegisterType((*SubscribeRequest)(nil), "onos.ric.store.indications.SubscribeRequest")
	proto.RegisterType((*SubscribeResponse)(nil), "onos.ric.store.indications.SubscribeResponse")
}

func init() {
	proto.RegisterFile("api/store/indications/indications.proto", fileDescriptor_b78dba36f8298c99)
}

var fileDescriptor_b78dba36f8298c99 = []byte{
	// 281 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x90, 0xbd, 0x4e, 0xc3, 0x30,
	0x14, 0x85, 0x63, 0xa8, 0x2a, 0xd5, 0x2c, 0xe0, 0x01, 0x45, 0x91, 0xb0, 0xa2, 0x2e, 0x64, 0xa0,
	0x0e, 0x0a, 0x12, 0x1b, 0x0c, 0x6c, 0xac, 0xe9, 0x13, 0xc4, 0xee, 0x05, 0x6e, 0xa5, 0xda, 0xc6,
	0x76, 0x18, 0x11, 0x8f, 0xc0, 0x63, 0x31, 0x76, 0x64, 0x44, 0xc9, 0x8b, 0x20, 0x5c, 0xd4, 0x46,
	0x48, 0x48, 0xb0, 0x58, 0xc7, 0xba, 0xdf, 0xfd, 0x39, 0x87, 0x9e, 0x36, 0x16, 0x4b, 0x1f, 0x8c,
	0x83, 0x12, 0xf5, 0x02, 0x55, 0x13, 0xd0, 0x68, 0x3f, 0xd4, 0xc2, 0x3a, 0x13, 0x0c, 0xcb, 0x8c,
	0x36, 0x5e, 0x38, 0x54, 0x22, 0xd2, 0x62, 0x40, 0x64, 0x97, 0xf7, 0x18, 0x1e, 0x5a, 0x29, 0x94,
	0x59, 0x95, 0x5f, 0x98, 0x75, 0x66, 0x09, 0x2a, 0x44, 0x3d, 0x73, 0xa8, 0xca, 0xb8, 0x44, 0x96,
	0x50, 0x35, 0x36, 0x3e, 0x9b, 0x99, 0xd3, 0x6b, 0x7a, 0x38, 0x6f, 0xa5, 0x57, 0x0e, 0x25, 0xd4,
	0xf0, 0xd8, 0x82, 0x0f, 0xec, 0x98, 0x8e, 0x17, 0xf0, 0x84, 0x0a, 0x52, 0x92, 0x93, 0x62, 0x52,
	0x7f, 0xff, 0x18, 0xa3, 0xa3, 0x00, 0x6e, 0x95, 0xee, 0xe5, 0xa4, 0x18, 0xd5, 0x51, 0x4f, 0x9f,
	0xe9, 0xd1, 0xa0, 0xdf, 0x5b, 0xa3, 0x3d, 0xfc, 0x67, 0x00, 0xbb, 0xa2, 0x74, 0xe7, 0x23, 0xdd,
	0xcf, 0x49, 0x71, 0x50, 0x9d, 0x08, 0xd4, 0x01, 0xdc, 0x5d, 0xa3, 0x40, 0xc4, 0x5b, 0x6b, 0x54,
	0xb7, 0x5b, 0xa8, 0x1e, 0x34, 0x54, 0x2f, 0x84, 0xb2, 0x5d, 0xc9, 0xcf, 0xc1, 0xc5, 0x4d, 0x4b,
	0x3a, 0xd9, 0x9e, 0xc5, 0xce, 0xc4, 0xef, 0xc1, 0x89, 0x9f, 0xee, 0xb3, 0xd9, 0x1f, 0xe9, 0x8d,
	0xd7, 0x73, 0x72, 0x93, 0xbe, 0x75, 0x9c, 0xac, 0x3b, 0x4e, 0x3e, 0x3a, 0x4e, 0x5e, 0x7b, 0x9e,
	0xac, 0x7b, 0x9e, 0xbc, 0xf7, 0x3c, 0x91, 0xe3, 0x98, 0xf1, 0xc5, 0x67, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x89, 0x5c, 0x7b, 0x8b, 0xe2, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IndicationsServiceClient is the client API for IndicationsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IndicationsServiceClient interface {
	// Subscribes to indications
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (IndicationsService_SubscribeClient, error)
}

type indicationsServiceClient struct {
	cc *grpc.ClientConn
}

func NewIndicationsServiceClient(cc *grpc.ClientConn) IndicationsServiceClient {
	return &indicationsServiceClient{cc}
}

func (c *indicationsServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (IndicationsService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_IndicationsService_serviceDesc.Streams[0], "/onos.ric.store.indications.IndicationsService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &indicationsServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IndicationsService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type indicationsServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *indicationsServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IndicationsServiceServer is the server API for IndicationsService service.
type IndicationsServiceServer interface {
	// Subscribes to indications
	Subscribe(*SubscribeRequest, IndicationsService_SubscribeServer) error
}

// UnimplementedIndicationsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedIndicationsServiceServer struct {
}

func (*UnimplementedIndicationsServiceServer) Subscribe(req *SubscribeRequest, srv IndicationsService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}

func RegisterIndicationsServiceServer(s *grpc.Server, srv IndicationsServiceServer) {
	s.RegisterService(&_IndicationsService_serviceDesc, srv)
}

func _IndicationsService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IndicationsServiceServer).Subscribe(m, &indicationsServiceSubscribeServer{stream})
}

type IndicationsService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type indicationsServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *indicationsServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _IndicationsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "onos.ric.store.indications.IndicationsService",
	HandlerType: (*IndicationsServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _IndicationsService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/store/indications/indications.proto",
}

func (m *SubscribeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Term != 0 {
		i = encodeVarintIndications(dAtA, i, uint64(m.Term))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Device) > 0 {
		i -= len(m.Device)
		copy(dAtA[i:], m.Device)
		i = encodeVarintIndications(dAtA, i, uint64(len(m.Device)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubscribeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Indication != nil {
		{
			size, err := m.Indication.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIndications(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Term != 0 {
		i = encodeVarintIndications(dAtA, i, uint64(m.Term))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Device) > 0 {
		i -= len(m.Device)
		copy(dAtA[i:], m.Device)
		i = encodeVarintIndications(dAtA, i, uint64(len(m.Device)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintIndications(dAtA []byte, offset int, v uint64) int {
	offset -= sovIndications(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SubscribeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovIndications(uint64(l))
	}
	if m.Term != 0 {
		n += 1 + sovIndications(uint64(m.Term))
	}
	return n
}

func (m *SubscribeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovIndications(uint64(l))
	}
	if m.Term != 0 {
		n += 1 + sovIndications(uint64(m.Term))
	}
	if m.Indication != nil {
		l = m.Indication.Size()
		n += 1 + l + sovIndications(uint64(l))
	}
	return n
}

func sovIndications(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIndications(x uint64) (n int) {
	return sovIndications(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SubscribeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndications
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndications
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndications
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIndications
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndications
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIndications(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndications
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIndications
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndications
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndications
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndications
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIndications
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndications
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Indication", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndications
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndications
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIndications
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Indication == nil {
				m.Indication = &e2ap.RicIndication{}
			}
			if err := m.Indication.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndications(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndications
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIndications
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIndications(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIndications
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIndications
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIndications
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIndications
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIndications
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIndications
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIndications        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIndications          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIndications = fmt.Errorf("proto: unexpected end of group")
)
