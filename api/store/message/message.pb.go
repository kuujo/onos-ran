// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/store/message/message.proto

package message

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	sb "github.com/onosproject/onos-ric/api/sb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MessageEntry is a message store entry
type MessageEntry struct {
	// 'key' is the message key
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// 'term' is the entry term
	Term uint64 `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
	// 'timestamp' is the entry timestamp
	Timestamp uint64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// 'message' is the stored message
	//
	// Types that are valid to be assigned to Message:
	//	*MessageEntry_Telemetry
	//	*MessageEntry_ControlUpdate
	Message isMessageEntry_Message `protobuf_oneof:"message"`
}

func (m *MessageEntry) Reset()         { *m = MessageEntry{} }
func (m *MessageEntry) String() string { return proto.CompactTextString(m) }
func (*MessageEntry) ProtoMessage()    {}
func (*MessageEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f303d1c9557996c, []int{0}
}
func (m *MessageEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageEntry.Merge(m, src)
}
func (m *MessageEntry) XXX_Size() int {
	return m.Size()
}
func (m *MessageEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageEntry.DiscardUnknown(m)
}

var xxx_messageInfo_MessageEntry proto.InternalMessageInfo

type isMessageEntry_Message interface {
	isMessageEntry_Message()
	MarshalTo([]byte) (int, error)
	Size() int
}

type MessageEntry_Telemetry struct {
	Telemetry *sb.TelemetryMessage `protobuf:"bytes,4,opt,name=telemetry,proto3,oneof" json:"telemetry,omitempty"`
}
type MessageEntry_ControlUpdate struct {
	ControlUpdate *sb.ControlUpdate `protobuf:"bytes,5,opt,name=control_update,json=controlUpdate,proto3,oneof" json:"control_update,omitempty"`
}

func (*MessageEntry_Telemetry) isMessageEntry_Message()     {}
func (*MessageEntry_ControlUpdate) isMessageEntry_Message() {}

func (m *MessageEntry) GetMessage() isMessageEntry_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *MessageEntry) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *MessageEntry) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *MessageEntry) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *MessageEntry) GetTelemetry() *sb.TelemetryMessage {
	if x, ok := m.GetMessage().(*MessageEntry_Telemetry); ok {
		return x.Telemetry
	}
	return nil
}

func (m *MessageEntry) GetControlUpdate() *sb.ControlUpdate {
	if x, ok := m.GetMessage().(*MessageEntry_ControlUpdate); ok {
		return x.ControlUpdate
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MessageEntry) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MessageEntry_Telemetry)(nil),
		(*MessageEntry_ControlUpdate)(nil),
	}
}

func init() {
	proto.RegisterType((*MessageEntry)(nil), "onos.ric.store.message.MessageEntry")
}

func init() { proto.RegisterFile("api/store/message/message.proto", fileDescriptor_9f303d1c9557996c) }

var fileDescriptor_9f303d1c9557996c = []byte{
	// 284 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xbd, 0x4e, 0xf3, 0x30,
	0x14, 0x86, 0xe3, 0xaf, 0xfd, 0x40, 0x31, 0x3f, 0x42, 0x1e, 0x90, 0x05, 0xc8, 0x44, 0x4c, 0x59,
	0xea, 0x48, 0x61, 0x62, 0x61, 0x28, 0x20, 0x75, 0x61, 0x89, 0x60, 0x46, 0x89, 0x39, 0x14, 0x43,
	0x1d, 0x47, 0xce, 0xe9, 0x90, 0xbb, 0xe0, 0xb2, 0x18, 0x3b, 0x32, 0xa2, 0xe4, 0x46, 0x50, 0xdd,
	0x40, 0x60, 0xf2, 0xab, 0xf3, 0x3e, 0x7e, 0x8e, 0x74, 0xe8, 0x69, 0x5e, 0xe9, 0xa4, 0x46, 0xeb,
	0x20, 0x31, 0x50, 0xd7, 0xf9, 0xfc, 0xe7, 0x95, 0x95, 0xb3, 0x68, 0xd9, 0xa1, 0x2d, 0x6d, 0x2d,
	0x9d, 0x56, 0xd2, 0x53, 0xb2, 0x6f, 0x8f, 0x2e, 0xe6, 0x1a, 0x9f, 0x97, 0x85, 0x54, 0xd6, 0x24,
	0x6b, 0xa4, 0x72, 0xf6, 0x05, 0x14, 0xfa, 0x3c, 0x71, 0x5a, 0x25, 0x5e, 0x5c, 0x24, 0x90, 0x4e,
	0x74, 0x89, 0xe0, 0x9e, 0x72, 0xd5, 0x2b, 0xcf, 0x3a, 0x42, 0x77, 0x6f, 0x37, 0x9a, 0x9b, 0x12,
	0x5d, 0xc3, 0x0e, 0xe8, 0xe8, 0x15, 0x1a, 0x4e, 0x22, 0x12, 0x87, 0xd9, 0x3a, 0x32, 0x46, 0xc7,
	0x08, 0xce, 0xf0, 0x7f, 0x11, 0x89, 0xc7, 0x99, 0xcf, 0xec, 0x84, 0x86, 0xa8, 0x0d, 0xd4, 0x98,
	0x9b, 0x8a, 0x8f, 0x7c, 0x31, 0x0c, 0xd8, 0x25, 0x0d, 0x11, 0x16, 0x60, 0x00, 0x5d, 0xc3, 0xc7,
	0x11, 0x89, 0x77, 0x52, 0x21, 0x87, 0xcd, 0x90, 0xca, 0xbb, 0xef, 0xba, 0xdf, 0x3d, 0x0b, 0xb2,
	0xe1, 0x0b, 0xbb, 0xa6, 0xfb, 0xca, 0x96, 0xe8, 0xec, 0xe2, 0x61, 0x59, 0x3d, 0xe6, 0x08, 0xfc,
	0xbf, 0x97, 0x1c, 0xff, 0x95, 0x5c, 0x6d, 0x98, 0x7b, 0x8f, 0xcc, 0x82, 0x6c, 0x4f, 0xfd, 0x1e,
	0x4c, 0x43, 0xba, 0xdd, 0x1f, 0x68, 0xca, 0xdf, 0x5b, 0x41, 0x56, 0xad, 0x20, 0x9f, 0xad, 0x20,
	0x6f, 0x9d, 0x08, 0x56, 0x9d, 0x08, 0x3e, 0x3a, 0x11, 0x14, 0x5b, 0xfe, 0x0c, 0xe7, 0x5f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x67, 0x2c, 0x07, 0x90, 0x7c, 0x01, 0x00, 0x00,
}

func (m *MessageEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		{
			size := m.Message.Size()
			i -= size
			if _, err := m.Message.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Timestamp != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x18
	}
	if m.Term != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Term))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessageEntry_Telemetry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageEntry_Telemetry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Telemetry != nil {
		{
			size, err := m.Telemetry.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *MessageEntry_ControlUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageEntry_ControlUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ControlUpdate != nil {
		{
			size, err := m.ControlUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MessageEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Term != 0 {
		n += 1 + sovMessage(uint64(m.Term))
	}
	if m.Timestamp != 0 {
		n += 1 + sovMessage(uint64(m.Timestamp))
	}
	if m.Message != nil {
		n += m.Message.Size()
	}
	return n
}

func (m *MessageEntry_Telemetry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Telemetry != nil {
		l = m.Telemetry.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *MessageEntry_ControlUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ControlUpdate != nil {
		l = m.ControlUpdate.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MessageEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Telemetry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &sb.TelemetryMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &MessageEntry_Telemetry{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControlUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &sb.ControlUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &MessageEntry_ControlUpdate{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)
