// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/store/telemetry/telemetry.proto

package telemetry

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	sb "github.com/onosproject/onos-ric/api/sb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TelemetryEntry is a telemetry store entry
type TelemetryEntry struct {
	// 'term' is the entry term
	Term uint64 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	// 'timestamp' is the entry timestamp
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// 'message' is the entry message
	Message *sb.TelemetryMessage `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *TelemetryEntry) Reset()         { *m = TelemetryEntry{} }
func (m *TelemetryEntry) String() string { return proto.CompactTextString(m) }
func (*TelemetryEntry) ProtoMessage()    {}
func (*TelemetryEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4928ff256f7f9a8, []int{0}
}
func (m *TelemetryEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TelemetryEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TelemetryEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TelemetryEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TelemetryEntry.Merge(m, src)
}
func (m *TelemetryEntry) XXX_Size() int {
	return m.Size()
}
func (m *TelemetryEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_TelemetryEntry.DiscardUnknown(m)
}

var xxx_messageInfo_TelemetryEntry proto.InternalMessageInfo

func (m *TelemetryEntry) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *TelemetryEntry) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *TelemetryEntry) GetMessage() *sb.TelemetryMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

func init() {
	proto.RegisterType((*TelemetryEntry)(nil), "onos.ric.telemetry.store.TelemetryEntry")
}

func init() {
	proto.RegisterFile("api/store/telemetry/telemetry.proto", fileDescriptor_e4928ff256f7f9a8)
}

var fileDescriptor_e4928ff256f7f9a8 = []byte{
	// 226 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x8e, 0xb1, 0x4a, 0x04, 0x31,
	0x14, 0x45, 0x27, 0xba, 0x28, 0x46, 0xb0, 0x48, 0x15, 0x44, 0xc2, 0xa2, 0xcd, 0x36, 0x9b, 0xc0,
	0xd8, 0x68, 0x2b, 0x58, 0xda, 0x2c, 0xfe, 0x40, 0x26, 0x3c, 0xd7, 0x88, 0x99, 0x84, 0x97, 0x67,
	0xb1, 0xe0, 0x47, 0xf8, 0x59, 0x96, 0x5b, 0x5a, 0xca, 0xcc, 0x8f, 0x88, 0x19, 0x66, 0xd3, 0x5d,
	0x72, 0x4f, 0xce, 0x7d, 0xfc, 0xc6, 0x26, 0x6f, 0x32, 0x45, 0x04, 0x43, 0xf0, 0x0e, 0x01, 0x08,
	0x77, 0x35, 0xe9, 0x84, 0x91, 0xa2, 0x90, 0xb1, 0x8f, 0x59, 0xa3, 0x77, 0xba, 0x36, 0xe5, 0xcf,
	0xe5, 0xfd, 0xd6, 0xd3, 0xeb, 0x47, 0xa7, 0x5d, 0x0c, 0xe6, 0x1f, 0x4a, 0x18, 0xdf, 0xc0, 0x51,
	0xc9, 0x6b, 0xf4, 0xce, 0x14, 0x7d, 0x67, 0xa0, 0x5d, 0xfb, 0x9e, 0x00, 0x5f, 0xac, 0x83, 0x49,
	0x7a, 0xfd, 0xc9, 0x2f, 0x9e, 0x67, 0xdb, 0x63, 0x4f, 0xb8, 0x13, 0x82, 0x2f, 0x08, 0x30, 0x48,
	0xb6, 0x64, 0xab, 0xc5, 0xa6, 0x64, 0x71, 0xc5, 0xcf, 0xc8, 0x07, 0xc8, 0x64, 0x43, 0x92, 0x47,
	0xa5, 0xa8, 0x0f, 0xe2, 0x8e, 0x9f, 0x06, 0xc8, 0xd9, 0x6e, 0x41, 0x1e, 0x2f, 0xd9, 0xea, 0xbc,
	0x55, 0xba, 0xce, 0x40, 0xab, 0x0f, 0x03, 0x4f, 0x13, 0xb5, 0x99, 0xf1, 0x07, 0xf9, 0x3d, 0x28,
	0xb6, 0x1f, 0x14, 0xfb, 0x1d, 0x14, 0xfb, 0x1a, 0x55, 0xb3, 0x1f, 0x55, 0xf3, 0x33, 0xaa, 0xa6,
	0x3b, 0x29, 0xe7, 0xdd, 0xfe, 0x05, 0x00, 0x00, 0xff, 0xff, 0x77, 0x9c, 0x05, 0xa7, 0x1a, 0x01,
	0x00, 0x00,
}

func (m *TelemetryEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TelemetryEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TelemetryEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTelemetry(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Timestamp != 0 {
		i = encodeVarintTelemetry(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if m.Term != 0 {
		i = encodeVarintTelemetry(dAtA, i, uint64(m.Term))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTelemetry(dAtA []byte, offset int, v uint64) int {
	offset -= sovTelemetry(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TelemetryEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Term != 0 {
		n += 1 + sovTelemetry(uint64(m.Term))
	}
	if m.Timestamp != 0 {
		n += 1 + sovTelemetry(uint64(m.Timestamp))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovTelemetry(uint64(l))
	}
	return n
}

func sovTelemetry(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTelemetry(x uint64) (n int) {
	return sovTelemetry(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TelemetryEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TelemetryEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TelemetryEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTelemetry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &sb.TelemetryMessage{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTelemetry(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTelemetry
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTelemetry
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTelemetry
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTelemetry        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTelemetry          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTelemetry = fmt.Errorf("proto: unexpected end of group")
)
