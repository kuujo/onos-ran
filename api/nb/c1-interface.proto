/*
Copyright 2020-present Open Networking Foundation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file defines O-RAN E2 interface, which is the interface between an eNB and RIC

syntax = "proto3";

package interface.c1;

service C1InterfaceService {
    // ListStations returns a stream of base station records.
    rpc ListStations(StationListRequest) returns (stream StationInfo);

    // ListStationLinks returns a stream of links between neighboring base stations.
    rpc ListStationLinks(StationLinkListRequest) returns (stream StationLinkInfo);

    // ListUELinks returns a stream of UI and base station links; one-time or (later) continuous subscribe.
    rpc ListUELinks(UELinkListRequest) returns (stream UELinkInfo);

    // TriggerHandOver returns a hand-over response indicating success or failure.
    // HO app will ask to handover to multiple UEs
    rpc TriggerHandOver(HandOverRequest) returns (HandOverResponse);

    // SetRadioPower returns a response indicating success or failure.
    // MLB app will ask to change transmission power to multiple stations
    rpc SetRadioPower(RadioPowerRequest) returns (RadioPowerResponse);
}

// station's unique ID
message ECGI {
    string plmnid = 1; // one of ECGI value
    string ecid = 2; // one of ECGI value
}

// Enumerated Power offset - It is defined in E2 interface
enum StationPowerOffset {
    PA_DB_MINUS6 = 0; // TX power of the station - 6 dB
    PA_DB_MINUX4DOT77 = 1; // TX power of the station - 4.77 dB
    PA_DB_MINUS3 = 2; // TX power of the station - 3 dB
    PA_DB_MINUS1DOT77 = 3; // TX power of the station - 1.77 dB
    PA_DB_0 = 4; // TX power of the station - 0 dB
    PA_DB_1 = 5; // TX power of the station + 1 dB
    PA_DB_2 = 6; // TX power of the station + 2 dB
    PA_DB_3 = 7; // TX power of the station + 3 dB
}

// if ecgi is empty, stream all stations' information
message StationListRequest {
    // ecgi - optional station identifier - list for all stations if not present
    ECGI ecgi = 1;

    // subscribe indicates whether to subscribe to events (e.g. ADD, UPDATE, and REMOVE) that occur
    // after all stations have been streamed to the client
    bool subscribe = 2;
}

message StationInfo {
    // station's unique ID
    ECGI ecgi = 1;

    // station's maximum number of connected UEs - used for MLB
    uint32 maxNumConnectedUes = 3;
}

// if ECGI is empty, stream all station links' information
message StationLinkListRequest {
    // ecgi - optional station identifier - list for all stations if not present
    ECGI ecgi = 1;

    // subscribe indicates whether to subscribe to events (e.g. ADD, UPDATE, and REMOVE) that occur
    // after all stationlinks have been streamed to the client
    bool subscribe = 2;
}

message StationLinkInfo {
    // target station ID
    ECGI ecgi = 1;
    // list of neighbor stations' ID
    repeated ECGI neighborECGI = 2;
}

// if crnti and ecgi are empty, stream all UE links' information
message UELinkListRequest {
    // crnti - optional UE's local ID in serving station  - list for all UE local IDs if not present
    string crnti = 1;

    // ecgi - optional UE's serving station identifier - list for all stations if not present
    ECGI ecgi = 2;

    // subscribe indicates whether to subscribe to events (e.g. ADD, UPDATE, and REMOVE) that occur
    // after all uelinks have been streamed to the client
    bool subscribe = 3;
}

message ChannelQuality {
    // Target stations's ID
    // This target station can be either the serving station or the serving station's neighbor stations.
    ECGI targetEcgi = 1;
    // CQI stands for Channel Quality Indicator in LTE, which ranges from 0 (out of range) to 15 (64 QAM and 948 Code rate)
    uint32 cqiHist = 2;
}

// It shows the link quality between the UE -- having crnti (1) and serviced by the station having ecgi (2) -- and the station -- having targetECGI (3).
// Target station can be not only UE's serving station but also the station's neighbor stations.
message UELinkInfo {
    // Both crnti and ecgi are used as a key in our store.
    // UE's local ID in serving station
    string crnti = 1;
    // UE's serving station ID
    ECGI ecgi = 2;

    // Channel quality values between the UE and its serving or neighbor stations.
    repeated ChannelQuality channelQualities = 3;

    // optional value: IMSI which is a global unique UE ID 
    // This value is from UEContextUpdate message
    // The crnti is local ID only working in a serving base station. However, sometimes an app may need the unique ID
    // Thus, add IMSI as an optional. 
    string imsi = 4;
}

message HandOverRequest {
    // UE's local ID in serving station
    string crnti = 1;
    // UE's source station ID - serving station
    ECGI srcStation = 2;
    // UE's destination station ID for handover - one of neighbor stations
    ECGI dstStation = 3;
}

message HandOverResponse {
    bool success = 1; // empty - no response will be okay
}

message RadioPowerRequest {
    // target station's ID
    ECGI ecgi = 1;
    // target station's power offset to adjust transmission power
    StationPowerOffset offset = 2;
}

message RadioPowerResponse {
    bool success = 1; // empty - no response will be okay
}

// Original structure below ------------

enum C1MessageType {
    C1_MESSAGE_UNKNOWN = 0;
    C1_GET_RNIBCELLS = 1;
    C1_GET_RNIBUES = 2;
    C1_GET_RNIBLINKS = 3;
    C1_POST_HANDOVERS = 4;
    C1_POST_RMMCONFIGURATION = 5;

    // Can be extended if necessary
}

enum C1RNIBType {
    C1_RNIB_UNKNOWN = 0;
    C1_RNIB_CELL = 1;
    C1_RNIB_UE = 2;
    C1_RNIB_LINK = 3;

    // Can be extended if necessary
}

message C1RequestMessage {
    C1RequestMessageHeader header = 1;
    C1RequestMessagePayload payload = 2;
}

message C1ResponseMessage {
    C1ResponseMessageHeader header = 1;
    C1ResponseMessagePayload payload = 2;
}

message C1RequestMessageHeader {
    C1MessageType type = 1;
}

message C1RequestMessagePayload {
    oneof request {
        C1RNIBType requestedRNIBType = 1; // for C1_GET_*
        C1HandoverRequest handoverRequest = 2; // for C1_POST_HANDOVERS
        C1RRMConfiguration rrmConfigurationRequest = 3; // for C1_POST_RRMCONFIGURATION
    }
}

message C1ResponseMessageHeader {
    C1MessageType type = 1;
}

message C1ResponseMessagePayload {
    oneof result {
        string responseCode = 1; // for POST_*
        C1RNIBCells rNIBCells = 2; // for GET_RNIBCELLS
        C1RNIBUEs rNIBUEs = 3; // for GET_RNIBUES
        C1RNIBLinks rNIBLinks = 4; // for GET_LINKS
    }
}

message C1RNIBCells {
    repeated C1RNIBCell rNIBCells = 1;
}

message C1RNIBUEs {
    repeated C1RNIBUE rNIBUEs = 1;
}

message C1RNIBLinks {
    repeated C1RNIBLink rNIBLinks = 1;
}

message C1ECGI {
    string plmnId = 1;
    string ecid = 2;
}

message C1CandScell {
    string pci = 1;
    string earfcnDl = 2;
}

message C1RNIBCell {
    C1ECGI ecgi = 1; // ID
    // attributes of R-NIB Cell
    // for Cell Configuration
    C1CellConfigAttribute cellConfiguration = 2;
    // for RRM configuration
    C1RRMConfigAttribute rrmConfiguration = 3;
}

message C1CellConfigAttribute {
    C1ECGI ecgi = 1;
    string pci = 2;
    repeated C1CandScell candScells = 3;
    string earfcnDl = 4;
    string earfcnUl = 5;
    string rbsPerTtiDl = 6;
    string rbsPerTtiUl = 7;
    string numTxAntenna = 8;
    string duplexMode = 9;
    string maxNumConnectedUes = 10;
    string maxNumConnectedBearers = 11;
    string maxNumUesSchedPerTtiDl = 12;
    string maxNumUesSchedPerTtiUl = 13;
    string dlfsSchedEnable = 14;
}

message C1PciArfcn {
    string pci = 1;
    string earfcnDl = 2;
}

enum C1XICICPA {
    C1_XICIC_PA_DB_MINUS6 = 0;
    C1_XICIC_PA_DB_MINUX4DOT77 = 1;
    C1_XICIC_PA_DB_MINUS3 = 2;
    C1_XICIC_PA_DB_MINUS1DOT77 = 3;
    C1_XICIC_PA_DB_0 = 4;
    C1_XICIC_PA_DB_1 = 5;
    C1_XICIC_PA_DB_2 = 6;
    C1_XICIC_PA_DB_3 = 7;
}

// This attributed defined all elements as a list (repeated), but this list only has a single element for MWC demo -> will be extended
message C1RRMConfigAttribute {
    C1ECGI ecgi = 1;
    repeated string crnti = 2; // going to be FFFF or null, which means all crnti
    C1PciArfcn pciArfcn = 3;
    repeated C1XICICPA pa = 4;
    repeated string startPrbDl = 5;
    repeated string endPrbDl = 6;
    repeated string subFrameBitmaskDl = 7;
    repeated string p0UePusch = 8;
    repeated string startPrbUl = 9;
    repeated string endPrbUl = 10;
    repeated string subFrameBitmaskUl = 11;
}

message C1RNIBUE {
    string imsi = 1; // ID
    // attributes of R-NIB UE
    string crnti = 2;
    C1ECGI sCell = 3;
    string mmeUeS1apId = 4;
    string enbUeS1apId = 5;
}

message C1RNIBLinkID {
    C1ECGI ecgi = 1;
    string imsi = 2;
}

// either serving cell or neighbor cell report
message C1RadioRepPerServCellAttribute {
    C1ECGI ecgi = 1;
    repeated string cqiHist = 2;
    repeated string riHist = 3;
    repeated string puschSinrHist = 4;
    repeated string pucchSinrHist = 5;
}

message C1RadioMeasReportPerUeAttribute {
    repeated C1RadioRepPerServCellAttribute radioRepPerServCell = 1;
}

message C1RNIBLink {
    C1RNIBLinkID linkId = 1; // ID
    // attributes of R-NIB Link
    C1RadioMeasReportPerUeAttribute radioMeasReportPerUe = 2;
}

message C1HandoverRequest {
    // UE in links[index] should be moved from srcCells[index] to dstCell[index]
    C1RNIBLinks links = 1;
    C1RNIBCells srcCells = 2;
    C1RNIBCells dstCells = 3;
}

message C1RRMConfiguration {
    // targetCells[index] should have the offset pa which MLB app assigns; pa value in targetCell[index] is the new value to update on RNIBCell
    C1RNIBCells targetCells = 1; 
}
