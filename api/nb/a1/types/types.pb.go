// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/nb/a1/types/types.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PolicyType
type PolicyType int32

const (
	PolicyType_QOS PolicyType = 0
	PolicyType_TSP PolicyType = 1
)

var PolicyType_name = map[int32]string{
	0: "QOS",
	1: "TSP",
}

var PolicyType_value = map[string]int32{
	"QOS": 0,
	"TSP": 1,
}

func (x PolicyType) String() string {
	return proto.EnumName(PolicyType_name, int32(x))
}

func (PolicyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_707af37a5630b7b3, []int{0}
}

// OperationStatus status of performing an A1 methods
type OperationStatus int32

const (
	OperationStatus_SUCCESS OperationStatus = 0
	OperationStatus_FAILED  OperationStatus = 1
)

var OperationStatus_name = map[int32]string{
	0: "SUCCESS",
	1: "FAILED",
}

var OperationStatus_value = map[string]int32{
	"SUCCESS": 0,
	"FAILED":  1,
}

func (x OperationStatus) String() string {
	return proto.EnumName(OperationStatus_name, int32(x))
}

func (OperationStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_707af37a5630b7b3, []int{1}
}

// EnforcementStatusType represents if a policy is enforced or not.
type EnforcementStatusType int32

const (
	EnforcementStatusType_ENFORCED     EnforcementStatusType = 0
	EnforcementStatusType_NOT_ENFORCED EnforcementStatusType = 1
	EnforcementStatusType_UNDEFINED    EnforcementStatusType = 2
)

var EnforcementStatusType_name = map[int32]string{
	0: "ENFORCED",
	1: "NOT_ENFORCED",
	2: "UNDEFINED",
}

var EnforcementStatusType_value = map[string]int32{
	"ENFORCED":     0,
	"NOT_ENFORCED": 1,
	"UNDEFINED":    2,
}

func (x EnforcementStatusType) String() string {
	return proto.EnumName(EnforcementStatusType_name, int32(x))
}

func (EnforcementStatusType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_707af37a5630b7b3, []int{2}
}

// EnforcementReasonType  represents the reason why notification is sent (e.g. why enforcement status has changed).
type EnforcementReasonType int32

const (
	EnforcementReasonType_SCOPE_NOT_APPLICABLE     EnforcementReasonType = 0
	EnforcementReasonType_STATEMENT_NOT_APPLICABLE EnforcementReasonType = 1
	EnforcementReasonType_OTHER_REASON             EnforcementReasonType = 2
)

var EnforcementReasonType_name = map[int32]string{
	0: "SCOPE_NOT_APPLICABLE",
	1: "STATEMENT_NOT_APPLICABLE",
	2: "OTHER_REASON",
}

var EnforcementReasonType_value = map[string]int32{
	"SCOPE_NOT_APPLICABLE":     0,
	"STATEMENT_NOT_APPLICABLE": 1,
	"OTHER_REASON":             2,
}

func (x EnforcementReasonType) String() string {
	return proto.EnumName(EnforcementReasonType_name, int32(x))
}

func (EnforcementReasonType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_707af37a5630b7b3, []int{3}
}

// PolicyQueryType type of a policy query (Query single policy, Query all policies, Query policy status)
type PolicyQueryType int32

const (
	// get a single policy based on a given PolicyID
	PolicyQueryType_SINGLE_POLICY PolicyQueryType = 0
	// get all policies identities
	PolicyQueryType_ALL_POLICIES PolicyQueryType = 1
	// get the policy status based on a given policyID
	PolicyQueryType_POLICY_STATUS PolicyQueryType = 2
)

var PolicyQueryType_name = map[int32]string{
	0: "SINGLE_POLICY",
	1: "ALL_POLICIES",
	2: "POLICY_STATUS",
}

var PolicyQueryType_value = map[string]int32{
	"SINGLE_POLICY": 0,
	"ALL_POLICIES":  1,
	"POLICY_STATUS": 2,
}

func (x PolicyQueryType) String() string {
	return proto.EnumName(PolicyQueryType_name, int32(x))
}

func (PolicyQueryType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_707af37a5630b7b3, []int{4}
}

// PolicyID Identifier of an A1 policy that is used in policy operations.
type PolicyID struct {
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *PolicyID) Reset()         { *m = PolicyID{} }
func (m *PolicyID) String() string { return proto.CompactTextString(m) }
func (*PolicyID) ProtoMessage()    {}
func (*PolicyID) Descriptor() ([]byte, []int) {
	return fileDescriptor_707af37a5630b7b3, []int{0}
}
func (m *PolicyID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PolicyID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PolicyID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PolicyID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyID.Merge(m, src)
}
func (m *PolicyID) XXX_Size() int {
	return m.Size()
}
func (m *PolicyID) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyID.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyID proto.InternalMessageInfo

func (m *PolicyID) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

// CellID an identifier for a single cell
type CellID struct {
}

func (m *CellID) Reset()         { *m = CellID{} }
func (m *CellID) String() string { return proto.CompactTextString(m) }
func (*CellID) ProtoMessage()    {}
func (*CellID) Descriptor() ([]byte, []int) {
	return fileDescriptor_707af37a5630b7b3, []int{1}
}
func (m *CellID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CellID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CellID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CellID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CellID.Merge(m, src)
}
func (m *CellID) XXX_Size() int {
	return m.Size()
}
func (m *CellID) XXX_DiscardUnknown() {
	xxx_messageInfo_CellID.DiscardUnknown(m)
}

var xxx_messageInfo_CellID proto.InternalMessageInfo

// UeID an identifier for a single UE
type UeID struct {
}

func (m *UeID) Reset()         { *m = UeID{} }
func (m *UeID) String() string { return proto.CompactTextString(m) }
func (*UeID) ProtoMessage()    {}
func (*UeID) Descriptor() ([]byte, []int) {
	return fileDescriptor_707af37a5630b7b3, []int{2}
}
func (m *UeID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UeID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UeID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UeID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UeID.Merge(m, src)
}
func (m *UeID) XXX_Size() int {
	return m.Size()
}
func (m *UeID) XXX_DiscardUnknown() {
	xxx_messageInfo_UeID.DiscardUnknown(m)
}

var xxx_messageInfo_UeID proto.InternalMessageInfo

// GroupID an identifier for a group of UEs
type GroupID struct {
}

func (m *GroupID) Reset()         { *m = GroupID{} }
func (m *GroupID) String() string { return proto.CompactTextString(m) }
func (*GroupID) ProtoMessage()    {}
func (*GroupID) Descriptor() ([]byte, []int) {
	return fileDescriptor_707af37a5630b7b3, []int{3}
}
func (m *GroupID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupID.Merge(m, src)
}
func (m *GroupID) XXX_Size() int {
	return m.Size()
}
func (m *GroupID) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupID.DiscardUnknown(m)
}

var xxx_messageInfo_GroupID proto.InternalMessageInfo

// SliceID an identifier for a slice
type SliceID struct {
}

func (m *SliceID) Reset()         { *m = SliceID{} }
func (m *SliceID) String() string { return proto.CompactTextString(m) }
func (*SliceID) ProtoMessage()    {}
func (*SliceID) Descriptor() ([]byte, []int) {
	return fileDescriptor_707af37a5630b7b3, []int{4}
}
func (m *SliceID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SliceID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SliceID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SliceID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SliceID.Merge(m, src)
}
func (m *SliceID) XXX_Size() int {
	return m.Size()
}
func (m *SliceID) XXX_DiscardUnknown() {
	xxx_messageInfo_SliceID.DiscardUnknown(m)
}

var xxx_messageInfo_SliceID proto.InternalMessageInfo

// QoSID an identifier for QoS
type QosID struct {
}

func (m *QosID) Reset()         { *m = QosID{} }
func (m *QosID) String() string { return proto.CompactTextString(m) }
func (*QosID) ProtoMessage()    {}
func (*QosID) Descriptor() ([]byte, []int) {
	return fileDescriptor_707af37a5630b7b3, []int{5}
}
func (m *QosID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QosID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QosID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QosID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QosID.Merge(m, src)
}
func (m *QosID) XXX_Size() int {
	return m.Size()
}
func (m *QosID) XXX_DiscardUnknown() {
	xxx_messageInfo_QosID.DiscardUnknown(m)
}

var xxx_messageInfo_QosID proto.InternalMessageInfo

// ScopeIdentifier Identifier of what the statements in the policy
// applies to (UE, group of UEs, slice, QoS flow, network resource or combinations thereof).
type ScopeIdentifier struct {
	UeId    *UeID    `protobuf:"bytes,1,opt,name=ue_id,json=ueId,proto3" json:"ue_id,omitempty"`
	GroupId *GroupID `protobuf:"bytes,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	SliceId *SliceID `protobuf:"bytes,3,opt,name=slice_id,json=sliceId,proto3" json:"slice_id,omitempty"`
	QosId   *QosID   `protobuf:"bytes,4,opt,name=qos_id,json=qosId,proto3" json:"qos_id,omitempty"`
	CellId  *CellID  `protobuf:"bytes,5,opt,name=cell_id,json=cellId,proto3" json:"cell_id,omitempty"`
}

func (m *ScopeIdentifier) Reset()         { *m = ScopeIdentifier{} }
func (m *ScopeIdentifier) String() string { return proto.CompactTextString(m) }
func (*ScopeIdentifier) ProtoMessage()    {}
func (*ScopeIdentifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_707af37a5630b7b3, []int{6}
}
func (m *ScopeIdentifier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScopeIdentifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScopeIdentifier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScopeIdentifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScopeIdentifier.Merge(m, src)
}
func (m *ScopeIdentifier) XXX_Size() int {
	return m.Size()
}
func (m *ScopeIdentifier) XXX_DiscardUnknown() {
	xxx_messageInfo_ScopeIdentifier.DiscardUnknown(m)
}

var xxx_messageInfo_ScopeIdentifier proto.InternalMessageInfo

func (m *ScopeIdentifier) GetUeId() *UeID {
	if m != nil {
		return m.UeId
	}
	return nil
}

func (m *ScopeIdentifier) GetGroupId() *GroupID {
	if m != nil {
		return m.GroupId
	}
	return nil
}

func (m *ScopeIdentifier) GetSliceId() *SliceID {
	if m != nil {
		return m.SliceId
	}
	return nil
}

func (m *ScopeIdentifier) GetQosId() *QosID {
	if m != nil {
		return m.QosId
	}
	return nil
}

func (m *ScopeIdentifier) GetCellId() *CellID {
	if m != nil {
		return m.CellId
	}
	return nil
}

func init() {
	proto.RegisterEnum("types.PolicyType", PolicyType_name, PolicyType_value)
	proto.RegisterEnum("types.OperationStatus", OperationStatus_name, OperationStatus_value)
	proto.RegisterEnum("types.EnforcementStatusType", EnforcementStatusType_name, EnforcementStatusType_value)
	proto.RegisterEnum("types.EnforcementReasonType", EnforcementReasonType_name, EnforcementReasonType_value)
	proto.RegisterEnum("types.PolicyQueryType", PolicyQueryType_name, PolicyQueryType_value)
	proto.RegisterType((*PolicyID)(nil), "types.PolicyID")
	proto.RegisterType((*CellID)(nil), "types.CellID")
	proto.RegisterType((*UeID)(nil), "types.UeID")
	proto.RegisterType((*GroupID)(nil), "types.GroupID")
	proto.RegisterType((*SliceID)(nil), "types.SliceID")
	proto.RegisterType((*QosID)(nil), "types.QosID")
	proto.RegisterType((*ScopeIdentifier)(nil), "types.ScopeIdentifier")
}

func init() { proto.RegisterFile("api/nb/a1/types/types.proto", fileDescriptor_707af37a5630b7b3) }

var fileDescriptor_707af37a5630b7b3 = []byte{
	// 486 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0xc1, 0x8e, 0x93, 0x40,
	0x1c, 0xc6, 0x81, 0x6d, 0xa1, 0xfd, 0xb7, 0xdd, 0x22, 0xd1, 0xa4, 0x51, 0x43, 0x36, 0x35, 0x31,
	0xca, 0x61, 0x1b, 0xf5, 0x09, 0x58, 0x98, 0xae, 0x93, 0x20, 0x50, 0x86, 0x1e, 0x3c, 0x11, 0xb6,
	0xcc, 0x1a, 0x12, 0x64, 0x58, 0xa0, 0x87, 0xbe, 0x85, 0x8f, 0xe5, 0x71, 0x4f, 0xc6, 0xa3, 0x69,
	0x5f, 0xc4, 0xcc, 0x4c, 0x63, 0xb2, 0x5e, 0xc8, 0xcc, 0xff, 0xfb, 0xf1, 0x7d, 0xdf, 0x9f, 0x00,
	0xaf, 0xf2, 0xa6, 0x5c, 0xd5, 0x77, 0xab, 0xfc, 0xc3, 0xaa, 0x3f, 0x34, 0xb4, 0x93, 0xcf, 0xeb,
	0xa6, 0x65, 0x3d, 0xb3, 0x86, 0xe2, 0xb2, 0x7c, 0x09, 0xa3, 0x98, 0x55, 0xe5, 0xee, 0x80, 0x7d,
	0xeb, 0x12, 0x34, 0xec, 0x2f, 0xd4, 0x2b, 0xf5, 0xdd, 0x38, 0xd1, 0xb0, 0xbf, 0x1c, 0x81, 0xee,
	0xd1, 0xaa, 0xc2, 0xfe, 0x52, 0x87, 0xc1, 0x96, 0x62, 0x7f, 0x39, 0x06, 0xe3, 0xb6, 0x65, 0xfb,
	0x46, 0x1e, 0x49, 0x55, 0xee, 0xf8, 0xd4, 0x80, 0xe1, 0x86, 0x75, 0xd8, 0x5f, 0xfe, 0x52, 0x61,
	0x4e, 0x76, 0xac, 0xa1, 0xb8, 0xa0, 0x75, 0x5f, 0xde, 0x97, 0xb4, 0xb5, 0xae, 0x60, 0xb8, 0xa7,
	0x59, 0x59, 0x08, 0xdf, 0xc9, 0xc7, 0xc9, 0xb5, 0x2c, 0xc1, 0xed, 0x92, 0xc1, 0x9e, 0xe2, 0xc2,
	0x7a, 0x0f, 0xa3, 0x6f, 0xdc, 0x94, 0x43, 0x9a, 0x80, 0x2e, 0xcf, 0xd0, 0x39, 0x2b, 0x31, 0x84,
	0x2e, 0xd1, 0x8e, 0x87, 0x72, 0xf4, 0xe2, 0x09, 0x7a, 0xee, 0x92, 0x18, 0x42, 0xc7, 0x85, 0xf5,
	0x06, 0xf4, 0x07, 0xd6, 0x71, 0x70, 0x20, 0xc0, 0xe9, 0x19, 0x14, 0x4d, 0x93, 0xe1, 0x03, 0xeb,
	0x70, 0x61, 0xbd, 0x05, 0x63, 0x47, 0xab, 0x8a, 0x53, 0x43, 0x41, 0xcd, 0xce, 0x94, 0xdc, 0x3b,
	0xd1, 0xb9, 0x8a, 0x0b, 0xc7, 0x06, 0x90, 0x5f, 0x29, 0x3d, 0x34, 0xd4, 0x32, 0xe0, 0x62, 0x13,
	0x11, 0x53, 0xe1, 0x87, 0x94, 0xc4, 0xa6, 0xea, 0x38, 0x30, 0x8f, 0x1a, 0xda, 0xe6, 0x7d, 0xc9,
	0x6a, 0xd2, 0xe7, 0xfd, 0xbe, 0xb3, 0x26, 0x60, 0x90, 0xad, 0xe7, 0x21, 0xc2, 0x41, 0x00, 0x7d,
	0xed, 0xe2, 0x00, 0xf9, 0xa6, 0xea, 0xac, 0xe1, 0x05, 0xaa, 0xef, 0x59, 0xbb, 0xa3, 0xdf, 0x69,
	0xdd, 0x4b, 0x5a, 0xd8, 0x4e, 0x61, 0x84, 0xc2, 0x75, 0x94, 0x78, 0xc8, 0x37, 0x15, 0xcb, 0x84,
	0x69, 0x18, 0xa5, 0xd9, 0xbf, 0x89, 0x6a, 0xcd, 0x60, 0xbc, 0x0d, 0x7d, 0xb4, 0xc6, 0x21, 0xf2,
	0x4d, 0xcd, 0xc9, 0x9f, 0xf8, 0x24, 0x34, 0xef, 0x58, 0x2d, 0x7c, 0x16, 0xf0, 0x9c, 0x78, 0x51,
	0x8c, 0x32, 0xfe, 0xbe, 0x1b, 0xc7, 0x01, 0xf6, 0xdc, 0x9b, 0x00, 0x99, 0x8a, 0xf5, 0x1a, 0x16,
	0x24, 0x75, 0x53, 0xf4, 0x05, 0x85, 0xe9, 0xff, 0xaa, 0xca, 0x13, 0xa3, 0xf4, 0x33, 0x4a, 0xb2,
	0x04, 0xb9, 0x24, 0x0a, 0x4d, 0xcd, 0xc1, 0x30, 0x97, 0x6b, 0x6f, 0xf6, 0xb4, 0x95, 0xbb, 0x3f,
	0x83, 0x19, 0xc1, 0xe1, 0x6d, 0x80, 0xb2, 0x38, 0x0a, 0xb0, 0xf7, 0x55, 0x36, 0x75, 0x83, 0x40,
	0xde, 0x31, 0x22, 0xa6, 0xca, 0x21, 0xa9, 0x66, 0x3c, 0x6e, 0x4b, 0x4c, 0xed, 0x66, 0xf1, 0xf3,
	0x68, 0xab, 0x8f, 0x47, 0x5b, 0xfd, 0x73, 0xb4, 0xd5, 0x1f, 0x27, 0x5b, 0x79, 0x3c, 0xd9, 0xca,
	0xef, 0x93, 0xad, 0xdc, 0xe9, 0xe2, 0x7f, 0xfc, 0xf4, 0x37, 0x00, 0x00, 0xff, 0xff, 0xa3, 0x14,
	0x3e, 0xfd, 0xae, 0x02, 0x00, 0x00,
}

func (m *PolicyID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicyID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CellID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CellID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CellID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UeID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UeID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UeID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GroupID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SliceID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SliceID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SliceID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QosID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QosID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QosID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ScopeIdentifier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScopeIdentifier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScopeIdentifier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CellId != nil {
		{
			size, err := m.CellId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.QosId != nil {
		{
			size, err := m.QosId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.SliceId != nil {
		{
			size, err := m.SliceId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.GroupId != nil {
		{
			size, err := m.GroupId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.UeId != nil {
		{
			size, err := m.UeId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PolicyID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CellID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UeID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GroupID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SliceID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QosID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ScopeIdentifier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UeId != nil {
		l = m.UeId.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.GroupId != nil {
		l = m.GroupId.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SliceId != nil {
		l = m.SliceId.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.QosId != nil {
		l = m.QosId.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CellId != nil {
		l = m.CellId.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PolicyID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicyID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicyID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CellID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CellID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CellID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UeID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UeID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UeID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SliceID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SliceID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SliceID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QosID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QosID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QosID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScopeIdentifier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScopeIdentifier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScopeIdentifier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UeId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UeId == nil {
				m.UeId = &UeID{}
			}
			if err := m.UeId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GroupId == nil {
				m.GroupId = &GroupID{}
			}
			if err := m.GroupId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SliceId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SliceId == nil {
				m.SliceId = &SliceID{}
			}
			if err := m.SliceId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QosId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QosId == nil {
				m.QosId = &QosID{}
			}
			if err := m.QosId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CellId == nil {
				m.CellId = &CellID{}
			}
			if err := m.CellId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
